version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: sajuna-blog-mysql-dev
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: sajuna_blog
      MYSQL_USER: ${MYSQL_USER:-blog_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-blog_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./configs/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - sajuna-blog-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: sajuna-blog-redis-dev
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - sajuna-blog-network

  # Node.js开发环境
  frontend-dev:
    image: node:20-alpine
    container_name: sajuna-blog-frontend-dev
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules  # 避免覆盖容器内的node_modules
    ports:
      - "3000:3000"
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://backend-dev:8080
    depends_on:
      - backend-dev
    networks:
      - sajuna-blog-network

  # Go开发环境
  backend-dev:
    image: golang:1.21-alpine
    container_name: sajuna-blog-backend-dev
    working_dir: /app
    volumes:
      - ./backend:/app
      - /go/pkg/mod  # Go模块缓存
    ports:
      - "8080:8080"
    command: sh -c "go mod tidy && go run main.go"
    environment:
      - CGO_ENABLED=0
      - GOOS=linux
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=blog_user
      - DB_PASSWORD=${MYSQL_PASSWORD:-blog_password}
      - DB_NAME=sajuna_blog
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GIN_TRUSTED_PROXIES=172.18.0.0/16  # 信任Docker网络内的代理
      - JWT_SECRET=${JWT_SECRET:-sajuna-blog-dev-secret-key-change-in-production}  # JWT密钥
      - GIN_MODE=debug
    depends_on:
      - mysql
      - redis
    networks:
      - sajuna-blog-network

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: sajuna-blog-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./configs/nginx-dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend-dev
      - backend-dev
    networks:
      - sajuna-blog-network

volumes:
  mysql_dev_data:
  redis_dev_data:

networks:
  sajuna-blog-network:
    driver: bridge
